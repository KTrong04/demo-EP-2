name: CI/CD Pipeline (Docker-linked)

on:
  push:
    branches: [main]

permissions:
  contents: read
  packages: write

env:
  IMAGE_TAG_SHA: sha-${{ github.sha }}

jobs:
  # ==============================
  # 1) TEST (Mongo + RabbitMQ)
  # ==============================
  test:
    name: Unit Tests (Mongo + RabbitMQ)
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      LOGIN_TEST_USER: ${{ secrets.LOGIN_TEST_USER }}
      LOGIN_TEST_PASSWORD: ${{ secrets.LOGIN_TEST_PASSWORD }}

    services:
      mongo:
        image: mongo:6
        ports: ["27017:27017"]
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })' || exit 1"
          --health-interval=5s --health-timeout=5s --health-retries=20

      rabbitmq:
        image: rabbitmq:3-management
        ports: ["5672:5672", "15672:15672"]
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=5s --health-timeout=5s --health-retries=20

      auth:
        image: yourdockerhubusername/auth:latest  # ðŸ‘ˆ sá»­a: khÃ´ng Ä‘Æ°á»£c dÃ¹ng secrets á»Ÿ Ä‘Ã¢y
        ports: ["3000:3000"]
        env:
          MONGODB_AUTH_URI: mongodb://mongo:27017/ep_auth_db
          JWT_SECRET: 11042004
          RABBITMQ_URI: amqp://rabbitmq
        options: >-
          --health-cmd="curl -f http://localhost:3000/api/health || exit 1"
          --health-interval=10s --health-timeout=5s --health-retries=12

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Create .env for services
        run: |
          mkdir -p auth product
          # auth
          cat > auth/.env <<EOF
          MONGODB_AUTH_URI=mongodb://127.0.0.1:27017/auth_test
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF
          # product
          cat > product/.env <<EOF
          MONGODB_PRODUCT_URI=mongodb://127.0.0.1:27017/product_test
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          RABBITMQ_URI=amqp://127.0.0.1:5672
          EOF

      - name: Install & Test (auth)
        working-directory: ./auth
        env:
          NODE_ENV: test
        run: |
          npm ci
          npm i -D chai@4.3.10 chai-http@4.4.0 mocha@10.3.0
          npm test

      - name: Wait for RabbitMQ
        run: timeout 60 bash -c 'until echo > /dev/tcp/127.0.0.1/5672; do sleep 1; done'

      - name: Wait for Auth service
        run: timeout 60 bash -c 'until curl -sf http://127.0.0.1:3000/api/health; do sleep 2; done'

      - name: Install & Test (product)
        working-directory: ./product
        env:
          NODE_ENV: test
          LOGIN_TEST_USER: ${{ secrets.LOGIN_TEST_USER }}
          LOGIN_TEST_PASSWORD: ${{ secrets.LOGIN_TEST_PASSWORD }}
          MONGODB_PRODUCT_URI: mongodb://127.0.0.1:27017/product_test
          RABBITMQ_URI: amqp://127.0.0.1:5672
          AUTH_SERVICE_URL: http://127.0.0.1:3000
        run: |
          npm ci
          npm i -D chai@4.3.10 chai-http@4.4.0 mocha@10.3.0
          npm test

  # ===========================================
  # 2) BUILD + PUSH DOCKER
  # ===========================================
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [api-gateway, auth, product, order]

    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.run_id }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===========================================
  # 3) DEPLOY (Windows self-hosted)
  # ===========================================
  deploy:
    name: Deploy on Localhost (Windows Runner)
    needs: build-and-push
    runs-on: self-hosted
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: latest

    steps:
      - name: Check Docker environment
        shell: cmd
        run: |
          docker --version
          docker compose version

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Stop old containers
        shell: cmd
        run: |
          cd /d "D:\HK\HK7\Lap-trinh-huong-dich-vu\OnTap\TH\demo-2\EProject-Phase-1"
          docker compose down --remove-orphans || exit /b 0

      - name: Pull images
        shell: cmd
        run: |
          docker pull %DOCKERHUB_USERNAME%/api-gateway:%IMAGE_TAG%
          docker pull %DOCKERHUB_USERNAME%/auth:%IMAGE_TAG%
          docker pull %DOCKERHUB_USERNAME%/product:%IMAGE_TAG%
          docker pull %DOCKERHUB_USERNAME%/order:%IMAGE_TAG%

      - name: Generate .env for compose
        shell: cmd
        run: |
          cd /d "D:\HK\HK7\Lap-trinh-huong-dich-vu\OnTap\TH\demo-2\EProject-Phase-1"
          > .env (
            echo DOCKERHUB_USERNAME=%DOCKERHUB_USERNAME%
            echo IMAGE_TAG=%IMAGE_TAG%
          )

      - name: Up with docker compose
        shell: cmd
        run: |
          cd /d "D:\HK\HK7\Lap-trinh-huong-dich-vu\OnTap\TH\demo-2\EProject-Phase-1"
          docker compose up -d --remove-orphans --force-recreate
          docker ps
