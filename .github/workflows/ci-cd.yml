name: 🚀 CI/CD Pipeline (Docker-linked Optimized)

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_TAG_SHA: sha-${{ github.sha }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  # ======================================================
  # 1️⃣ TEST (Mongo + RabbitMQ)
  # ======================================================
  test:
    name: 🧪 Unit Tests (Mongo + RabbitMQ)
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports: [ "27017:27017" ]
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })' || exit 1"
          --health-interval=5s --health-timeout=5s --health-retries=20

      rabbitmq:
        image: rabbitmq:3-management
        ports: [ "5672:5672", "15672:15672" ]
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=5s --health-timeout=5s --health-retries=20

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      # ------------------------------
      # Build local Auth image (for tests)
      # ------------------------------
      - name: Build local Auth image
        run: docker build -t auth-test ./auth

      # ------------------------------
      # Create .env for testing
      # ------------------------------
      - name: Create .env for services
        run: |
          mkdir -p auth product
          # auth
          cat > auth/.env << 'EOF'
          MONGODB_AUTH_URI=mongodb://mongo:27017/auth_test
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          RABBITMQ_URI=amqp://rabbitmq
          EOF
          # product
          cat > product/.env << 'EOF'
          MONGODB_PRODUCT_URI=mongodb://mongo:27017/product_test
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          RABBITMQ_URI=amqp://rabbitmq
          AUTH_SERVICE_URL=http://127.0.0.1:3000
          EOF

      # ------------------------------
      # Run Auth Tests
      # ------------------------------
      - name: 🧩 Install & Test (auth)
        working-directory: ./auth
        env: { NODE_ENV: test }
        run: |
          npm ci
          npm i -D chai@4.3.10 chai-http@4.4.0 mocha@10.3.0
          npm test

      # ------------------------------
      # Start Auth server locally (background)
      # ------------------------------
      - name: 🚀 Start Auth Server
        working-directory: ./auth
        env: { NODE_ENV: test }
        run: |
          nohup npm start >/tmp/auth.log 2>&1 &
          echo "⏳ Waiting for Auth service..."
          timeout 60 bash -c 'until echo > /dev/tcp/127.0.0.1/3000; do sleep 1; done'
          echo "✅ Auth server is up!"

      # ------------------------------
      # Run Product Tests
      # ------------------------------
      - name: 🧩 Install & Test (product)
        working-directory: ./product
        env:
          NODE_ENV: test
          LOGIN_TEST_USER: ${{ secrets.LOGIN_TEST_USER }}
          LOGIN_TEST_PASSWORD: ${{ secrets.LOGIN_TEST_PASSWORD }}
          MONGODB_PRODUCT_URI: mongodb://mongo:27017/product_test
          RABBITMQ_URI: amqp://rabbitmq
          AUTH_SERVICE_URL: http://127.0.0.1:3000
        run: |
          npm ci
          npm i -D chai@4.3.10 chai-http@4.4.0 mocha@10.3.0
          npm test


  # ======================================================
  # 2️⃣ BUILD & PUSH DOCKER IMAGES
  # ======================================================
  build-and-push:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        service: [api-gateway, auth, product, order]

    steps:
      - uses: actions/checkout@v4

      - name: 🔑 Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: ⚙️ Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Docker metadata for ${{ matrix.service }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}
          tags: |
            latest
            ${{ github.sha }}

      - name: 🚀 Build & Push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  # ======================================================
  # 3️⃣ DEPLOY (Windows Self-hosted)
  # ======================================================
  deploy:
    name: 🖥️ Deploy on Localhost (Windows Runner)
    runs-on: self-hosted
    needs: build-and-push
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: latest

    steps:
      - name: 🧩 Check Docker environment
        shell: cmd
        run: |
          docker --version
          docker compose version

      - name: 🔑 Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🧹 Stop old containers
        shell: cmd
        run: |
          cd /d "D:\HK\HK7\Lap-trinh-huong-dich-vu\OnTap\TH\demo-2\EProject-Phase-1"
          docker compose down --remove-orphans || exit /b 0

      - name: 📦 Pull new images
        shell: cmd
        run: |
          docker pull %DOCKERHUB_USERNAME%/api-gateway:%IMAGE_TAG%
          docker pull %DOCKERHUB_USERNAME%/auth:%IMAGE_TAG%
          docker pull %DOCKERHUB_USERNAME%/product:%IMAGE_TAG%
          docker pull %DOCKERHUB_USERNAME%/order:%IMAGE_TAG%

      - name: 🧾 Generate .env for compose
        shell: cmd
        run: |
          cd /d "D:\HK\HK7\Lap-trinh-huong-dich-vu\OnTap\TH\demo-2\EProject-Phase-1"
          > .env (
            echo DOCKERHUB_USERNAME=%DOCKERHUB_USERNAME%
            echo IMAGE_TAG=%IMAGE_TAG%
          )

      - name: 🚀 Start with docker compose
        shell: cmd
        run: |
          cd /d "D:\HK\HK7\Lap-trinh-huong-dich-vu\OnTap\TH\demo-2\EProject-Phase-1"
          docker compose up -d --remove-orphans --force-recreate
          docker ps
